{
  
    
        "post0": {
            "title": "NFT Marketplace Analysis",
            "content": "NFT Marketplace Analysis . Introduction . Have you recently heard news about NFT&#39;S? If you have it&#39;s likely due to the growing community of digital asset enthusiast popping up around the world. NFT headlines have made their way into many public outlets such as the news, social networks, television, newspapers, magazines ultimately making them grow in mainstream popularity. The question is why? Why are these NFT &#39;things&#39; people keep talking about getting so popular? Well to get an understanding of why, it&#39;s important to understand what exactly an NFT is. . What&#39;s an NFT? . NFT is short for Non-fungible token, which is a unit of data stored on a blockchain that certifies a digital asset to be unique and therefore not interchangeable, while also offering a unique digital certificate of ownership. Aside from this there are various types of source origins tied to the NFT, which make it possible to identify who owns it, who previously owned it, who created it, how many copies of it there are etcetera. Originally NFTs were part of the Ethereum blockchain but increasingly more blockchains have implemented their own versions of NFTs, which has increased the amount being made. Contrary to owning physical items such as valuable trading cards NFT&#39;s cannot be stolen being that they have a unique digital certificate that can only be transfered. A NFT can be made up of either videos, images, or audio, and what makes them so special is that they are one of a kind similar to trading cards or postage stamps. . Why Buy NFT&#39;s? . You might ask, what about NFT&#39;s that contain objects that can be viewed online by anyone at anytime? More importantly, why would someone spend hundreds to millions of dollars on a NFT that can be viewed by anyone? The answer to that is because collectors value the bragging rights of owning the original item almost more than the object itself. There&#39;s a sense of digital scarcity when it comes to NFT&#39;s and thats because theres a unique identifying code attached to the object, and relative to other digital objects on the market they are one of a kind or one out of a very limited run. This scarcity increases the demand for ownership of such digital objects and with the increase in demand comes an increase in price. Therefore, another major motive for people spending their money on such digital objects is the positive return on investment. Whether it be for the love of the object or the love of the money, the NFT marketplace has created an opportunity for both consumers and creators. Additionally, with the increase in digital technology becoming availale and implemented by companies that run the currency market it seems like NFT&#39;s will only become further developed in the future digital world we are coming to. . How To Choose NFT&#39;s . Now that you got a better sense of how NFT&#39;s work and why they have become so important, you might be asking yourself how do I know which NFT&#39;s to buy? Well, if you already have a keen interest in a particular creator or type of digital object then finding out which NFT to purchase is fairly simple aside from choosing from the multiple varying collections that might be available. However, if you&#39;re interested in NFT&#39;s for the return on investment then this analysis should help guide some of the questions you might have when it comes to seeing how to invest your money in the NFT marketplace. . Methods . This introductory analysis will use a dataset of roughly 9,388 NFT collections along with several supplimentary transaction characteristic tables that represents the activity of the Ethereum NFT market between April 1, 2021 and September 25, 2021. The analysis will ultimately aim at identifying which collections have the highest and lowest market values, so that I myself and the readers can get a better sense of which factors lead to NFT&#39;s rising or decreasing in value ultimately aiding them in understanding what type of collections are best to invest in. The analysis will start with a statistical analysis and will lead into a deeper correlational analysis with complimentary visualizations. . Research questions that I will be looking at during this analysis include: . - What are the top 5 and lowest 5 market value NFT collections? - How does the amount of current owners affect an NFT collections market value? - How does minting cost affect an NFT collections market value? - How does the transfer rate within an NFT collection affect its market value? . Results . import sqlite3 import pandas as pd import matplotlib.pyplot as plt . db = sqlite3.connect(&#39;/home/jovyan/DH-140 Project/nfts.sqlite&#39;) . df = pd.read_sql_query(&#39;SELECT * FROM current_market_values limit 500000;&#39;, db) . High Market Value NFT Collections . Once I had the list of all my NFT&#39;s I went ahead and organized them within the dataframe so that the highest valued pieces were at the top of the list. I then took a look at the top 10 pieces and realized that a majority of the NFT&#39;s in this category belonged to the same collections. So I expanded the list of the highest valued NFT&#39;s to give me 60 pieces, in order to view the top 5 collections within the list. . I then ran a statistical analysis of the list to get a sense of what the values were for each piece. . Market value box plot of the top 60 NFT collections denoted in WEI. WEI is the smallest denomination of Ether (The Cryptocurrency) and it makes the transaction fee calculation easier. In order to convert WEI to US dollars one must first convert the WEI to Ether and then multiply that amount of Ether to its valued price at the time, which in this case was roughly around $2,694. . &lt;AxesSubplot:&gt; . I&#39;ve converted the values of the box plot above to USD to get a better sense of the values: Mean = $1,550,684 Min = $808,350 Max = $2,485,676 25% = $1,131,690 50% = $1,306,832 75% = $2,020,875 df1 = pd.read_sql_query(&#39;SELECT * FROM nfts&#39;, db) . df1.loc[df1[&#39;address&#39;] == &#39;0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a&#39;] . address name symbol . 51 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | Art Blocks | BLOCKS | . . df1.loc[df1[&#39;address&#39;] == &#39;0x06012c8cf97BEaD5deAe237070F9587f8E7A266d&#39;] . address name symbol . 6 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | CryptoKitties | CK | . . df1.loc[df1[&#39;address&#39;] == &#39;0x0427743DF720801825a5c82e0582B1E915E0F750&#39;] . address name symbol . 262 0x0427743DF720801825a5c82e0582B1E915E0F750 | 0xmons.xyz | 0XMON | . . df1.loc[df1[&#39;address&#39;] == &#39;0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26&#39;] . address name symbol . 989 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | Tom Sachs Rocket Components | TSRC | . . df1.loc[df1[&#39;address&#39;] == &#39;0x05a46f1E545526FB803FF974C790aCeA34D1f2D6&#39;] . address name symbol . 4609 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | n | N | . . import plotly.graph_objects as go fig = go.Figure(data=[go.Scatter( x=[1, 2, 3, 4, 5], y=[5, 4, 3, 2, 1], text=[&#39;Art Blocks&#39;, &#39;CryptoKitties&#39;, &#39;0xmons.xyz&#39;, &#39;Tom Sachs Rocket Components&#39;, &#39;n&#39;], mode=&#39;markers&#39;, marker=dict( color=[&#39;blue&#39;, &#39;orange&#39;, &#39;green&#39;, &#39;red&#39;,&#39;black&#39;], size=[120, 100, 80, 60, 40], ) )]) fig.update_layout( title=&#39;Top 5 Highest Valued NFT Collections&#39;, ) fig.show() . . Now that i got a clear understanding of which NFT&#39;s are highest in value I began to take a look at each collection individually to see how factors such as the amount of current owners they have, the cost of minting, and the amount of transfers influence their value. . I first took a look to see if there was a correlation between the amount of owners and collection value, however I should note that like current market value dataset I was limited to looking at just 500000 rows from the total dataset . df2 = pd.read_sql_query(&#39;SELECT * FROM current_owners limit 500000;&#39;, db) . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a&#39;] . nft_address token_id owner . 150786 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 0 | 0xC896866E927e6F8a416Ba209976115E79fA0a66F | . 150787 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 1 | 0xC896866E927e6F8a416Ba209976115E79fA0a66F | . 150788 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 10 | 0x7Fbc25EEDFd1D7F9cE1EC1dB951D22f0a8B0691a | . 150789 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 100 | 0x4D3DfD28AA35869D52C5cE077Aa36E3944b48d1C | . 150790 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 1000002 | 0x7Fbc25EEDFd1D7F9cE1EC1dB951D22f0a8B0691a | . ... ... | ... | ... | . 156524 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 992 | 0x01956B22171782e8D7c47d7dC7Ae371c24AeEe30 | . 156525 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 993 | 0x6E70d217636fEEBF83Ab1cACFdE147d07538526E | . 156526 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 994 | 0xCF9799f5292BF594D1716E941C67Bf77C29E1a8B | . 156527 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 995 | 0x26efA48F71252F2F7D6c3927E615e6dfAA96B85D | . 156528 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a | 997 | 0x19A0110537e4960c765D6f3Fea9445b022A287f0 | . 5743 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x06012c8cf97BEaD5deAe237070F9587f8E7A266d&#39;] . nft_address token_id owner . 167660 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 1000041 | 0x6C62230f009820a60001a82976234B590e7b2292 | . 167661 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 1000043 | 0xc231593658224CEb4242667F7fFf04b579AEDB98 | . 167662 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 1000054 | 0x2f423Af118b376733B4281e1A48da62465Fc476b | . 167663 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 1000102 | 0x7B9AB3AeD9582A379dcBc3e1dd28405330dC64D5 | . 167664 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 1000238 | 0xa03Ee697425842Ef74b85C43552609beE34aebFD | . ... ... | ... | ... | . 224412 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 998690 | 0x12b11cB89Efd6AdF1b56470824f548DC2b93572B | . 224413 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 999470 | 0x2cBdc108Ea9A35eb9685B8A534A07c714AB3539d | . 224414 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 999691 | 0x9C6E6e963460Cc027A33744248A177727900a4B8 | . 224415 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 999857 | 0x613d62B1313655E1cA9ED15D2D8B1e2Cb4C0Bcad | . 224416 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d | 999890 | 0xd6d3A9D2D44D31D4830760710061bE1920A8eDE1 | . 56757 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x0427743DF720801825a5c82e0582B1E915E0F750&#39;] . nft_address token_id owner . 114425 0x0427743DF720801825a5c82e0582B1E915E0F750 | 100 | 0x0c3DbcF236282ed1ECa06597D8858CCfBa569c47 | . 114426 0x0427743DF720801825a5c82e0582B1E915E0F750 | 101 | 0xFaF1031B02A994b80f12Cc1ee4C0dCeBbB946aA0 | . 114427 0x0427743DF720801825a5c82e0582B1E915E0F750 | 102 | 0xFe202706E36F31aFBaf4b4543C2A8bBa4ddB2deE | . 114428 0x0427743DF720801825a5c82e0582B1E915E0F750 | 103 | 0x73FFCe54cE7d21397A7932D9bC2a7e013FF30902 | . 114429 0x0427743DF720801825a5c82e0582B1E915E0F750 | 106 | 0x5E0Ad9C6a1810B6b6c839c3bB71c755A3A29C49f | . ... ... | ... | ... | . 114684 0x0427743DF720801825a5c82e0582B1E915E0F750 | 92 | 0xE301612b0751f6D862a27BE205fb8e3c40c8C6db | . 114685 0x0427743DF720801825a5c82e0582B1E915E0F750 | 94 | 0xA947aEBa6697a85BFD845ADC8384cbD1956d74C5 | . 114686 0x0427743DF720801825a5c82e0582B1E915E0F750 | 95 | 0x2e71232E6bc4e41EF0023A3512ECF48D769b207c | . 114687 0x0427743DF720801825a5c82e0582B1E915E0F750 | 97 | 0x0c3DbcF236282ed1ECa06597D8858CCfBa569c47 | . 114688 0x0427743DF720801825a5c82e0582B1E915E0F750 | 99 | 0xb39fF833f6B42D474Bc649E3f435856c8F0CB426 | . 264 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26&#39;] . nft_address token_id owner . 484204 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 0 | 0x0000000000000000000000000000000000000000 | . 484205 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 1 | 0x0000000000000000000000000000000000000000 | . 484206 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 10 | 0x0000000000000000000000000000000000000000 | . 484207 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 100 | 0xCe90a7949bb78892F159F428D0dC23a8E3584d75 | . 484208 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 1000 | 0x0000000000000000000000000000000000000000 | . ... ... | ... | ... | . 487199 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 995 | 0x0000000000000000000000000000000000000000 | . 487200 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 996 | 0x0000000000000000000000000000000000000000 | . 487201 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 997 | 0xAe873595b03b09fBEdF892D3e75636c4d49D523C | . 487202 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 998 | 0x6Ec30Fd91A504Aad948839B985C7263888B2Ad68 | . 487203 0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26 | 999 | 0x0000000000000000000000000000000000000000 | . 3000 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x05a46f1E545526FB803FF974C790aCeA34D1f2D6&#39;] . nft_address token_id owner . 157552 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 1 | 0x6327343B3a12Fbd25488Da0e82Bd4512aD080423 | . 157553 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 10 | 0xef728Cdeb37A080Ab86312e860A956122D3A6252 | . 157554 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 100 | 0xdA59cf2548c4768f66fA6F078A843C24dE941049 | . 157555 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 1000 | 0xbb38E1c9e6d61B51F2eF5f9290b29e86d9191FDf | . 157556 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 1001 | 0xE16dF6503Acd3c79b6E032f62c61752bEC16eeF2 | . ... ... | ... | ... | . 166435 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 995 | 0xe5C030D8Af0E024E60bC04fb0240FD470e6Ab28a | . 166436 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 996 | 0x071666CD02Cc335806bc182b6743EaC0DfB6437e | . 166437 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 997 | 0x08543f4c79f7e5d585A2622cA485e8201eFd9aDA | . 166438 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 998 | 0xa8eBe1eeD676d5BfEB7F7B5933625281489aF8A3 | . 166439 0x05a46f1E545526FB803FF974C790aCeA34D1f2D6 | 999 | 0xdA59cf2548c4768f66fA6F078A843C24dE941049 | . 8888 rows × 3 columns . . ownersdf.plot(kind=&#39;bar&#39;, x=&#39;NFT Collections&#39;, y=&#39;Number of Owners&#39;, color=[&#39;blue&#39;, &#39;orange&#39;, &#39;green&#39;, &#39;red&#39;,&#39;black&#39;],figsize=(15, 10),legend=False) plt.title(&#39;NFT Collection Owners&#39;) plt.xlabel(&#39;NFT Collections&#39;) plt.ylabel(&#39;Collection Owners&#39;) . . Text(0, 0.5, &#39;Collection Owners&#39;) . Analytical Process Shift . After doing this analysis of current owners for each collection I was able to tell that there was no direct correlation between the number of owners and the value NFT&#39;s and so I started to think about the results I would be getting if I continued to analyze the mint costs and transfer count of each collection. So, it was here where I did some more background research on the affect of each factor and found that neither of the factors influence the market value. I learned that by looking at the current owners I would only be seeing how many individual pieces are within the collection, which does not influence the value of a NFT collection. Then, if I did an analysis on the minting cost of NFT&#39;s which is a procedure needed to be done in order to further buy or sell the digital object, I would not recieve any correlation either because the minting cost does not affect the NFT value but rather the value of the NFT is what affects the minting cost. Lastly, I found that if I did an analysis on the amount of transfers within a collection I would always end up with a positive correlation between the increase of transfers and increase of value because NFT values automatically increase over time due to the scarcity of the pieces. So, I decided to shift my analysis on comparing the transfers made by owners who hold NFT&#39;s within high value collections and owners who hold NFT&#39;s within low value collections. By shifting my analytical process to this comparison between owners I knew I would no longer be able to gain insight into the factors that influece increases or decreases within the NFT market, but I would be gaining insight into what the best practices are when obtaining NFT&#39;s which should ultimately increase or at the very least maintain my investment. . Furthermore, being that I had completed an analysis on the top collections and owners I was still able to use that data to help me explore the transfer dataset which contained the amount of transfer ins and transfer outs made by owners. The &#39;transfer in&#39; data gave me the total amount of purchases made owners between April 1st and September 25th and the &#39;transfer out&#39; data gave me the total amount of sells made by owners between April 1st and September 25th. . I continued my analysis by looking at a sample of owner&#39;s transfer ins &amp; outs within the 5 high market value collections still utilizing the supplimentary collection and owner data above. . df3 = pd.read_sql_query(&#39;SELECT * FROM transfer_statistics_by_address limit 500000;&#39;, db) . # Adress of Art Blocks NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0xC896866E927e6F8a416Ba209976115E79fA0a66F&#39;] . address transfers_out transfers_in . 359240 0xC896866E927e6F8a416Ba209976115E79fA0a66F | 0 | 1700 | . . # Address of CryptoKitties NFT holder df3.loc[df3[&#39;address&#39;] == &#39;0x6C62230f009820a60001a82976234B590e7b2292&#39;] . address transfers_out transfers_in . 213422 0x6C62230f009820a60001a82976234B590e7b2292 | 0 | 1855 | . . # Address of 0xymons.xyz NFT holder df3.loc[df3[&#39;address&#39;] == &#39;0x0c3DbcF236282ed1ECa06597D8858CCfBa569c47&#39;] . address transfers_out transfers_in . 28656 0x0c3DbcF236282ed1ECa06597D8858CCfBa569c47 | 6 | 50 | . . # Address of Tom Sachs Rocket Component NFT holder df3.loc[df3[&#39;address&#39;] == &#39;0xCe90a7949bb78892F159F428D0dC23a8E3584d75&#39;] . address transfers_out transfers_in . 365789 0xCe90a7949bb78892F159F428D0dC23a8E3584d75 | 0 | 189 | . . # Address of N NFT holder df3.loc[df3[&#39;address&#39;] == &#39;0xef728Cdeb37A080Ab86312e860A956122D3A6252&#39;] . address transfers_out transfers_in . 493386 0xef728Cdeb37A080Ab86312e860A956122D3A6252 | 22 | 30 | . . Low Market Value NFT Collections . Once I had all the transfer data for the high value collection owners I then moved on to running the same analysis for the low value NFT collections. However, for these the I had to include the bottom 250000 nft collections in the descriptive statistics because if I would&#39;ve included the bottom 60 like I did for the high value collections I would&#39;ve gotten an output that only contained NFT values less than $50 which also did not contain the bottom 5 value collections I was looking for. . Market value box plot of the bottom 250,000 NFT Collections . &lt;AxesSubplot:&gt; . I then ran the tail of the NFT dataframe to find the bottom 5 NFT collections and then I located the NFT address of the bottom 5 collections within the NFT dataset to get a clear list of the names. . df1.loc[df1[&#39;address&#39;] == &#39;0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7&#39;] . address name symbol . 1427 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | HedgehogsInSocks | HEDGEHOGS | . . df1.loc[df1[&#39;address&#39;] == &#39;0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D&#39;] . address name symbol . 5011 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | MONSTER MOBS | MONSTERMOBS | . . df1.loc[df1[&#39;address&#39;] == &#39;0x08Da8a11C9b3A35D715B5da5B3E4661929490F53&#39;] . address name symbol . 3597 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | ManekiGang | MKGG | . . df1.loc[df1[&#39;address&#39;] == &#39;0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5&#39;] . address name symbol . 535 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | CryptoJanky | JNK | . . df1.loc[df1[&#39;address&#39;] == &#39;0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc&#39;] . address name symbol . 5471 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | TheProjectURS | URS | . . I then created the bubble chart showing the bottom 5 valued NFT collections . import plotly.graph_objects as go fig = go.Figure(data=[go.Scatter( x=[1, 2, 3, 4, 5], y=[5, 4, 3, 2, 1], text=[&#39;HedgehogsInSocks&#39;, &#39;MONSTER MOBS&#39;, &#39;ManekiGang&#39;, &#39;CryptoJanky&#39;, &#39;TheProjectURS&#39;], mode=&#39;markers&#39;, marker=dict( color=[&#39;red&#39;, &#39;pink&#39;, &#39;yellow&#39;, &#39;purple&#39;,&#39;brown&#39;], size=[120, 100, 80, 60, 40], ) )]) fig.update_layout( title=&#39;Top 5 Lowest Valued NFT Collections&#39;, ) fig.show() . . I then looked for the amount of owners within these 5 bottom valued collections, so that I can get a sample from each collection to run the transfer analysis . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7&#39;] . nft_address token_id owner . 166471 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 0 | 0x7156359D0401947d63E18BAC51d157cfeeE9eEFa | . 166472 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 1 | 0x76240cCFDCCd5A8982886Cf5dFf94D52110FECdC | . 166473 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 10 | 0x1e412DF8F9b07364806BaD3A31B15EF17c2A6B36 | . 166474 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 100 | 0xaE099730Dfc04C086Acd0Ad9881f86ac62AD0b7a | . 166475 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 101 | 0xFae0240C9Acd01BF6B8D1Eb467bF7df58eb8c800 | . ... ... | ... | ... | . 167263 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 95 | 0xD9D45EC98b594e02FD2d202bBf2bbE417d72A4e2 | . 167264 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 96 | 0x99ED7190511ac2B714fFbb9e4E1817f6851EF9f5 | . 167265 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 97 | 0x99ED7190511ac2B714fFbb9e4E1817f6851EF9f5 | . 167266 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 98 | 0x99ED7190511ac2B714fFbb9e4E1817f6851EF9f5 | . 167267 0x05cd72B0b8Becf4D7105bDc6fcaea758FD73C7E7 | 99 | 0xE8DE914248c915060e629fEC5DdF3D01ce723588 | . 797 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D&#39;] . nft_address token_id owner . 499202 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 0 | 0x071C81BcB8D6D7B3D26f4e186385f0aCe78C0bDd | . 499203 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1 | 0x5C7a9f47B765471173046C1FF98a4eBBD717f51d | . 499204 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 10 | 0x0D7ed3ff76dd70805b1624E1AA6470c52F3E7DcE | . 499205 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 100 | 0x499aC5FFE6a1A33480cfb6Ca76A578a133faA09f | . 499206 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1000 | 0xAC3c837D67B4F638C0ABBF711327CFd33149Cf3D | . ... ... | ... | ... | . 499995 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1711 | 0x720D330816aFd75A72e012F8D669A19918483375 | . 499996 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1712 | 0x720D330816aFd75A72e012F8D669A19918483375 | . 499997 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1713 | 0x720D330816aFd75A72e012F8D669A19918483375 | . 499998 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1714 | 0x720D330816aFd75A72e012F8D669A19918483375 | . 499999 0x125Ecab9FdC132cAd4D6C055b9381AaD60efAF3D | 1715 | 0xea951D454723ffcbFbaD6375772EdC6557D8006c | . 798 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x08Da8a11C9b3A35D715B5da5B3E4661929490F53&#39;] . nft_address token_id owner . 295573 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 0 | 0xB98b3547C8197148D93E7Ed1977803c1405cee5E | . 295574 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 1 | 0xE5a7Efe11e3f237fDD9b0ebe1a7d7F1380f5f710 | . 295575 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 100 | 0xe3609Ec9e5103CA69Ad27C2d81bF846675E1c612 | . 295576 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 1000 | 0xE57d3CC3aA62588C42285ED1daFBb579b2992Cc6 | . 295577 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 10002 | 0x6BbcC2A1758Ebc099F0cb03583D9f2b16433C428 | . ... ... | ... | ... | . 306926 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 9994 | 0xE5a7Efe11e3f237fDD9b0ebe1a7d7F1380f5f710 | . 306927 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 9995 | 0xC4594cE2fFE7543117AEd14a8aA27A3b89bfE356 | . 306928 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 9996 | 0x5f1088110EdcBa27Fc206cdcc326B413b5867361 | . 306929 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 9997 | 0x853F1ecD269bcB6B579C5e520996db417b66b36c | . 306930 0x08Da8a11C9b3A35D715B5da5B3E4661929490F53 | 9998 | 0xc32049000c1D4D7eaF61cCba13D676e514514Dc7 | . 11358 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5&#39;] . nft_address token_id owner . 233190 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 1 | 0x290FbE4d4745f6B5267c209C92C8D81CebB5E9f0 | . 233191 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 10 | 0xC2F87f88dF0F2c602a9a7Dc2e89cecdb9790d972 | . 233192 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 100 | 0x378C7162B3C883FEAF8E43c1aF69Fb92e00944dB | . 233193 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 1000 | 0xAfbe89F1447a22684A4e3f1F4F941806c6D02e85 | . 233194 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 10000 | 0x4716A6058E7916Be509F6d93a8986867E6ac8FDe | . ... ... | ... | ... | . 245408 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 9995 | 0x838A93A78C12d4e1111653f78d2BfCaFF49Bd5C6 | . 245409 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 9996 | 0x0BD8BeFeD58e6b41A2857d144bF3a574F86C97dC | . 245410 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 9997 | 0xD9BdB3B8bb3C47bdC0017C958c8708F1373e9eEF | . 245411 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 9998 | 0x50806F1E52f4C482CC96d03145Abf731074FA33F | . 245412 0x066f2D5ead7951F0d0038C19AffD500B9F02c0e5 | 9999 | 0x18867A60B441bF9571B337e1792d92F1F3cB1690 | . 12223 rows × 3 columns . . df2.loc[df2[&#39;nft_address&#39;] == &#39;0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc&#39;] . nft_address token_id owner . 318320 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 0 | 0xf3b714646376E8243ebE670FEd50c678E4d0be39 | . 318321 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 1 | 0x4332d57F7C7EdCf651734E31887FD35b632e5e4A | . 318322 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 10 | 0x978Ab91FC0AE0330345F0e928C67F60E339a9216 | . 318323 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 100 | 0xA83c8F4fCF84d37Af5AB76Dd01cC34d4320dfc13 | . 318324 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 1000 | 0x8619Aa4B7fEF939b7b3BF6F39757f2c018928d8C | . ... ... | ... | ... | . 328298 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 998 | 0xCe1334e7dA77348d92366C0C5f32125c099F570c | . 328299 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 9980 | 0x1a9B0A1AC1d07033509A2F00e0498f4178A6C457 | . 328300 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 9981 | 0x26C30e9398CBf05Ce89E818f330A44D0CFDA7485 | . 328301 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 9982 | 0x64ae474dA28Db2Ef925b87E94a81C8F2783f6066 | . 328302 0x08f0B2A4351514E63E9E03A661aDFe58D463CfBc | 999 | 0xd3B39EBc306Ef743b197731Fe9252CE6a1F97a94 | . 9983 rows × 3 columns . . ownersdf2.plot(kind=&#39;bar&#39;, x=&#39;NFT Collections&#39;, y=&#39;Number of Owners&#39;, color=[&#39;red&#39;, &#39;pink&#39;, &#39;yellow&#39;, &#39;purple&#39;,&#39;brown&#39;],figsize=(15, 10),legend=False) plt.title(&#39;NFT Collection Owners&#39;) plt.xlabel(&#39;NFT Collections&#39;) plt.ylabel(&#39;Collection Owners&#39;) . . Text(0, 0.5, &#39;Collection Owners&#39;) . I created this bar plot of the total amount of current owners within the bottom 5 collections just so the analysis process of both the high and low value collections would be symmetrical. I then ran the analysis of each owners transfers within the individual low value collections. . # Address of HedgehogsInSocks NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0xD9D45EC98b594e02FD2d202bBf2bbE417d72A4e2&#39;] . address transfers_out transfers_in . 376260 0xD9D45EC98b594e02FD2d202bBf2bbE417d72A4e2 | 30 | 44 | . . # Address of MONSTER MOBS NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0xAC3c837D67B4F638C0ABBF711327CFd33149Cf3D&#39;] . address transfers_out transfers_in . 329829 0xAC3c837D67B4F638C0ABBF711327CFd33149Cf3D | 25 | 127 | . . # Address of ManekiGang NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0xA83c8F4fCF84d37Af5AB76Dd01cC34d4320dfc13&#39;] . address transfers_out transfers_in . 326923 0xA83c8F4fCF84d37Af5AB76Dd01cC34d4320dfc13 | 2 | 4 | . . # Address of CryptoJanky NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0x378C7162B3C883FEAF8E43c1aF69Fb92e00944dB&#39;] . address transfers_out transfers_in . 110926 0x378C7162B3C883FEAF8E43c1aF69Fb92e00944dB | 54 | 29 | . . # Address of TheProjectURS NFT Holder df3.loc[df3[&#39;address&#39;] == &#39;0xA83c8F4fCF84d37Af5AB76Dd01cC34d4320dfc13&#39;] . address transfers_out transfers_in . 326923 0xA83c8F4fCF84d37Af5AB76Dd01cC34d4320dfc13 | 2 | 4 | . . Comparison Plot . transfersdf . High and Low Value NFT Owners Avg Tranfer Ins Avg Tranfer Outs . 0 HVO | 764.8 | 5.6 | . 1 LVO | 41.0 | 22.6 | . . import numpy as np transfersdf.plot(kind=&#39;bar&#39;, x=&#39;High and Low Value NFT Owners&#39;, y=[&#39;Avg Tranfer Ins&#39;, &#39;Avg Tranfer Outs&#39;],figsize=(15, 10), color=[&#39;red&#39;,&#39;green&#39;,&#39;red&#39;,&#39;green&#39;]) plt.xticks(rotation=&#39;horizontal&#39;) y1= np.array([764.8,41]) y2= np.array([5.6,22.6]) plt.plot(y1, linestyle = &#39;dashed&#39;, color = &#39;red&#39;) plt.plot(y2, linestyle = &#39;dashed&#39;, color = &#39;green&#39;) plt.title(&#39;High and Low Value Owner Transfer Statistics&#39;) plt.ylabel(&#39;Transfer Count&#39;) plt.show() . . Discussion . After looking at the comparison plot between high value collection owners and low value collection owners It can be seen that on average high value collection owners purchase more NFT&#39;s than low value collection owners. Contrary to this, low value collection owners sell more NFT&#39;s than high value collection owners. What does this mean? This tells us that based on the small sample of owners analyzed those who obtain NFT&#39;s within the high market value collection tend to keep investing more money into purchasing more NFT&#39;s rather than selling the NFT&#39;s they have to purchase other NFT pieces. Which allows us to make two inferences, either they really like the collection piece they purchased or they are seeing that keeping the individual NFT&#39;s is producing more profit for them over time than if they decided to sell the NFT soon after they purchased it. The low value collection owners are selling they&#39;re NFT&#39;s roughly 120% more times which is not producing them high profits nor causing the collections to rise in value in the long run. Suggesting that if a person is going to invest in the NFT marketplace they should hold their NFT&#39;s for as long as they can so that there is a greater chance of the NFT collection becoming a high value collection. This is just a peek into the actions commited by NFT owners but it does give us insight into how one should manage the pieces they buy in the marketplace. By understanding how owners retain or sell their NFT&#39;s in both high and low value collections, we can see what is the best thing to do in order to be the owner of high value collections. This analyses also opens up the door for future analysis in which one could look into whether high value collection owners enter the marketplace by purchasing already high market value NFT&#39;s or if they start by purchasing low market value NFT&#39;s, whether they mint the NFT&#39;s themselved or if they buy it already minted and how this affects their return on investment. . Analyzing NFT dataset&#39;s to draw conclusion is no easy tasks, after completing this analysis I can see how NFT collection values and owner actions can be influenced by so many external factors that cannot be tracked on the blockchain such as the buzz surrounding a collection, uniqueness, personal perception, and promotion. This leads me to think of other possible datasets that can be created which can possibly shed some light on the future market values. Including things such as qualitative owner data or NFT object type like music, sports, art etcetera would allow for analysis that suggest future popularity or future crashes. Nonetheless, with the rapid growth of digital assets like NFT&#39;s static datasets will prove to only be helpful for a short amount of time. I think its important for consumers to stay updated on the most recent advancements within digital creations to see how the next NFT can play a role in it or with it. .",
            "url": "https://jopompa.github.io/fastaitest/fastpages/jupyter/2022/03/14/Final_Project.html",
            "relUrl": "/fastpages/jupyter/2022/03/14/Final_Project.html",
            "date": " • Mar 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Assignment 3",
            "content": "Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . hospitals_df = pd.read_csv(&#39;hospitals.csv&#39;) . hospitals_df . Facility.Name Facility.City Facility.State Facility.Type Rating.Overall Rating.Mortality Rating.Safety Rating.Readmission Rating.Experience Rating.Effectiveness ... Procedure.Heart Attack.Value Procedure.Heart Failure.Cost Procedure.Heart Failure.Quality Procedure.Heart Failure.Value Procedure.Pneumonia.Cost Procedure.Pneumonia.Quality Procedure.Pneumonia.Value Procedure.Hip Knee.Cost Procedure.Hip Knee.Quality Procedure.Hip Knee.Value . 0 Southeast Alabama Medical Center | Dothan | AL | Government | 2 | Below | Above | Below | Below | Same | ... | Average | 17041 | Average | Average | 18281 | Average | Average | 25812 | Average | Higher | . 1 Marshall Medical Center South | Boaz | AL | Government | 1 | Below | Below | Below | Same | Above | ... | Average | 15819 | Worse | Average | 15614 | Worse | Lower | 22747 | Average | Average | . 2 Eliza Coffee Memorial Hospital | Florence | AL | Government | 3 | Below | Above | Above | Below | Same | ... | Average | 16334 | Average | Average | 17371 | Average | Average | 24491 | Average | Higher | . 3 Mizell Memorial Hospital | Opp | AL | Private | 1 | Same | Same | Below | Below | Below | ... | Unknown | 14541 | Average | Lower | 15226 | Worse | Lower | 23472 | Average | Average | . 4 Crenshaw Community Hospital | Luverne | AL | Proprietary | 4 | Same | None | Above | None | Same | ... | Unknown | 13767 | Average | Lower | 14341 | Average | Lower | 0 | Unknown | Unknown | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4767 Providence Hospital Of North Houston Llc | Houston | TX | Proprietary | -1 | None | None | None | None | None | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4768 The Hospitals Of Providence Transmountain Campus | El Paso | TX | Proprietary | -1 | None | None | None | Same | Same | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4769 Saint Camillus Medical Center | Hurst | TX | Proprietary | -1 | None | None | None | None | None | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4770 Houston Methodist The Woodlands Hospital | The Woodlands | TX | Private | 3 | None | Same | None | Above | Same | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4771 The Hospitals Of Providence Horizon City Campus | Horizon City | TX | Proprietary | -1 | None | None | None | None | Same | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4772 rows × 24 columns . The dataframe has 4772 rows and 24 columns . hospitals_df.columns . Index([&#39;Facility.Name&#39;, &#39;Facility.City&#39;, &#39;Facility.State&#39;, &#39;Facility.Type&#39;, &#39;Rating.Overall&#39;, &#39;Rating.Mortality&#39;, &#39;Rating.Safety&#39;, &#39;Rating.Readmission&#39;, &#39;Rating.Experience&#39;, &#39;Rating.Effectiveness&#39;, &#39;Rating.Timeliness&#39;, &#39;Rating.Imaging&#39;, &#39;Procedure.Heart Attack.Cost&#39;, &#39;Procedure.Heart Attack.Quality&#39;, &#39;Procedure.Heart Attack.Value&#39;, &#39;Procedure.Heart Failure.Cost&#39;, &#39;Procedure.Heart Failure.Quality&#39;, &#39;Procedure.Heart Failure.Value&#39;, &#39;Procedure.Pneumonia.Cost&#39;, &#39;Procedure.Pneumonia.Quality&#39;, &#39;Procedure.Pneumonia.Value&#39;, &#39;Procedure.Hip Knee.Cost&#39;, &#39;Procedure.Hip Knee.Quality&#39;, &#39;Procedure.Hip Knee.Value&#39;], dtype=&#39;object&#39;) . hospitals_df.dtypes . . Facility.Name object Facility.City object Facility.State object Facility.Type object Rating.Overall int64 Rating.Mortality object Rating.Safety object Rating.Readmission object Rating.Experience object Rating.Effectiveness object Rating.Timeliness object Rating.Imaging object Procedure.Heart Attack.Cost int64 Procedure.Heart Attack.Quality object Procedure.Heart Attack.Value object Procedure.Heart Failure.Cost int64 Procedure.Heart Failure.Quality object Procedure.Heart Failure.Value object Procedure.Pneumonia.Cost int64 Procedure.Pneumonia.Quality object Procedure.Pneumonia.Value object Procedure.Hip Knee.Cost int64 Procedure.Hip Knee.Quality object Procedure.Hip Knee.Value object dtype: object . hospitals_df.head(2) . Facility.Name Facility.City Facility.State Facility.Type Rating.Overall Rating.Mortality Rating.Safety Rating.Readmission Rating.Experience Rating.Effectiveness ... Procedure.Heart Attack.Value Procedure.Heart Failure.Cost Procedure.Heart Failure.Quality Procedure.Heart Failure.Value Procedure.Pneumonia.Cost Procedure.Pneumonia.Quality Procedure.Pneumonia.Value Procedure.Hip Knee.Cost Procedure.Hip Knee.Quality Procedure.Hip Knee.Value . 0 Southeast Alabama Medical Center | Dothan | AL | Government | 2 | Below | Above | Below | Below | Same | ... | Average | 17041 | Average | Average | 18281 | Average | Average | 25812 | Average | Higher | . 1 Marshall Medical Center South | Boaz | AL | Government | 1 | Below | Below | Below | Same | Above | ... | Average | 15819 | Worse | Average | 15614 | Worse | Lower | 22747 | Average | Average | . 2 rows × 24 columns . hospitals_df.tail(2) . Facility.Name Facility.City Facility.State Facility.Type Rating.Overall Rating.Mortality Rating.Safety Rating.Readmission Rating.Experience Rating.Effectiveness ... Procedure.Heart Attack.Value Procedure.Heart Failure.Cost Procedure.Heart Failure.Quality Procedure.Heart Failure.Value Procedure.Pneumonia.Cost Procedure.Pneumonia.Quality Procedure.Pneumonia.Value Procedure.Hip Knee.Cost Procedure.Hip Knee.Quality Procedure.Hip Knee.Value . 4770 Houston Methodist The Woodlands Hospital | The Woodlands | TX | Private | 3 | None | Same | None | Above | Same | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 4771 The Hospitals Of Providence Horizon City Campus | Horizon City | TX | Proprietary | -1 | None | None | None | None | Same | ... | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | 0 | Unknown | Unknown | . 2 rows × 24 columns . hospitals_df.describe(include=&#39;all&#39;) . Facility.Name Facility.City Facility.State Facility.Type Rating.Overall Rating.Mortality Rating.Safety Rating.Readmission Rating.Experience Rating.Effectiveness ... Procedure.Heart Attack.Value Procedure.Heart Failure.Cost Procedure.Heart Failure.Quality Procedure.Heart Failure.Value Procedure.Pneumonia.Cost Procedure.Pneumonia.Quality Procedure.Pneumonia.Value Procedure.Hip Knee.Cost Procedure.Hip Knee.Quality Procedure.Hip Knee.Value . count 4772 | 4772 | 4772 | 4772 | 4772.000000 | 4772 | 4772 | 4772 | 4772 | 4772 | ... | 4772 | 4772.000000 | 4772 | 4772 | 4772.000000 | 4772 | 4772 | 4772.000000 | 4772 | 4772 | . unique 4589 | 2929 | 56 | 5 | NaN | 4 | 4 | 4 | 4 | 4 | ... | 4 | NaN | 4 | 4 | NaN | 4 | 4 | NaN | 4 | 4 | . top Memorial Hospital | Chicago | TX | Private | NaN | Same | None | Above | None | Same | ... | Unknown | NaN | Average | Average | NaN | Average | Average | NaN | Average | Unknown | . freq 15 | 29 | 403 | 2078 | NaN | 2663 | 2142 | 1508 | 1340 | 3372 | ... | 2506 | NaN | 3141 | 2522 | NaN | 3555 | 2338 | NaN | 2615 | 2045 | . mean NaN | NaN | NaN | NaN | 2.179380 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 12149.034367 | NaN | NaN | 14625.655071 | NaN | NaN | 12501.068525 | NaN | NaN | . std NaN | NaN | NaN | NaN | 1.935582 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 7502.579223 | NaN | NaN | 6598.128266 | NaN | NaN | 10997.181810 | NaN | NaN | . min NaN | NaN | NaN | NaN | -1.000000 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 0.000000 | NaN | NaN | 0.000000 | NaN | NaN | 0.000000 | NaN | NaN | . 25% NaN | NaN | NaN | NaN | 1.000000 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 0.000000 | NaN | NaN | 15169.500000 | NaN | NaN | 0.000000 | NaN | NaN | . 50% NaN | NaN | NaN | NaN | 3.000000 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 15921.500000 | NaN | NaN | 16933.500000 | NaN | NaN | 19120.000000 | NaN | NaN | . 75% NaN | NaN | NaN | NaN | 4.000000 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 17126.500000 | NaN | NaN | 18245.000000 | NaN | NaN | 21985.500000 | NaN | NaN | . max NaN | NaN | NaN | NaN | 5.000000 | NaN | NaN | NaN | NaN | NaN | ... | NaN | 22450.000000 | NaN | NaN | 27126.000000 | NaN | NaN | 42546.000000 | NaN | NaN | . 11 rows × 24 columns . hospitals_df[&#39;Facility.Name&#39;] . 0 Southeast Alabama Medical Center 1 Marshall Medical Center South 2 Eliza Coffee Memorial Hospital 3 Mizell Memorial Hospital 4 Crenshaw Community Hospital ... 4767 Providence Hospital Of North Houston Llc 4768 The Hospitals Of Providence Transmountain Campus 4769 Saint Camillus Medical Center 4770 Houston Methodist The Woodlands Hospital 4771 The Hospitals Of Providence Horizon City Campus Name: Facility.Name, Length: 4772, dtype: object . hospitals_df[&#39;Rating.Overall&#39;].plot(kind=&#39;line&#39;) . &lt;AxesSubplot:&gt; . hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;]] . Rating.Overall . 0 2 | . 1 1 | . 2 3 | . 3 1 | . 4 4 | . 5 2 | . 6 2 | . 7 2 | . 8 -1 | . 9 3 | . 10 3 | . # as well as the matching 10 elements of a different column that has interesting text hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]] . Rating.Overall Facility.Name . 0 2 | Southeast Alabama Medical Center | . 1 1 | Marshall Medical Center South | . 2 3 | Eliza Coffee Memorial Hospital | . 3 1 | Mizell Memorial Hospital | . 4 4 | Crenshaw Community Hospital | . 5 2 | St Vincent&#39;s East | . 6 2 | Dekalb Regional Medical Center | . 7 2 | Shelby Baptist Medical Center | . 8 -1 | Callahan Eye Hospital | . 9 3 | Helen Keller Memorial Hospital | . 10 3 | Dale Medical Center | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]].plot(kind=&#39;bar&#39;, x=&#39;Facility.Name&#39;, y=&#39;Rating.Overall&#39;) . &lt;AxesSubplot:xlabel=&#39;Facility.Name&#39;&gt; . hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]].plot(kind=&#39;barh&#39;, x=&#39;Facility.Name&#39;, y=&#39;Rating.Overall&#39;) . &lt;AxesSubplot:ylabel=&#39;Facility.Name&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) barcolors = [] for i in hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]].index: if hospitals_df.loc[i,&#39;Facility.Name&#39;] in [&#39;Dale Medical Center&#39;,&#39;Helen Keller Memorial Hospital&#39;]: barcolors.append(&#39;red&#39;) else: barcolors.append(&#39;blue&#39;) print(barcolors) . [&#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;red&#39;, &#39;red&#39;] . import matplotlib.pyplot as plt . ax = hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]].plot(kind=&#39;barh&#39;, x=&#39;Facility.Name&#39;, y=&#39;Rating.Overall&#39;, color=barcolors) legend = ax.legend() legend.remove() plt.xlabel(&#39;Overall Hospital Ratings&#39;) . Text(0.5, 0, &#39;Overall Hospital Ratings&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . hospitals_df.loc[0:10,[&#39;Rating.Overall&#39;,&#39;Facility.Name&#39;]].plot(kind=&#39;scatter&#39;, x=&#39;Facility.Name&#39;, y=&#39;Rating.Overall&#39;) x = [0,1,2,3,4,5,6,7,8,9,10] labels = [&#39;Southeast Alabama Medical Center&#39;,&#39;Marshall Medical Center South&#39; , &#39;Eliza Coffee Memorial Hospital&#39;, &#39;Mizell Memorial Hospital&#39;,&#39;Crenshaw Community Hospital&#39;,&#39;St Vincents East&#39;,&#39;Dekalb Regional Medical Center&#39;,&#39;Shelby Baptist Medical Center&#39;,&#39;Callahan Eye Hospital&#39;,&#39;Helen Keller Memorial Hospital&#39;,&#39;Dale Medical Center&#39;] plt.xticks(x, labels, rotation=&#39;vertical&#39;) . ([&lt;matplotlib.axis.XTick at 0x7f9f5487a160&gt;, &lt;matplotlib.axis.XTick at 0x7f9f5487a130&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548a3280&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548a3e80&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548ac610&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548a3e50&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548ac190&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548b34f0&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548b3c40&gt;, &lt;matplotlib.axis.XTick at 0x7f9f548393d0&gt;, &lt;matplotlib.axis.XTick at 0x7f9f54839b20&gt;], [Text(0, 0, &#39;Southeast Alabama Medical Center&#39;), Text(1, 0, &#39;Marshall Medical Center South&#39;), Text(2, 0, &#39;Eliza Coffee Memorial Hospital&#39;), Text(3, 0, &#39;Mizell Memorial Hospital&#39;), Text(4, 0, &#39;Crenshaw Community Hospital&#39;), Text(5, 0, &#39;St Vincents East&#39;), Text(6, 0, &#39;Dekalb Regional Medical Center&#39;), Text(7, 0, &#39;Shelby Baptist Medical Center&#39;), Text(8, 0, &#39;Callahan Eye Hospital&#39;), Text(9, 0, &#39;Helen Keller Memorial Hospital&#39;), Text(10, 0, &#39;Dale Medical Center&#39;)]) . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | .",
            "url": "https://jopompa.github.io/fastaitest/2022/03/11/Assignment03.html",
            "relUrl": "/2022/03/11/Assignment03.html",
            "date": " • Mar 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jopompa.github.io/fastaitest/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jopompa.github.io/fastaitest/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jopompa.github.io/fastaitest/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jopompa.github.io/fastaitest/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}